#!/usr/bin/env python3

import sys
import pathlib
import logging
import datetime

import pandas as pd

logger = logging.getLogger(__name__)


class TemplateParams(dict):
    def __missing__(self, key):
        """
        keep {unspecified_key} as it was
        """
        return '{' + key + '}'


def main(script_fp, arg_fp, template_fp, qsub_fp):
    # Parse argument information
    arg_df = pd.read_csv(arg_fp, sep='\t', header=None)
    arg_cnt, arg_len = arg_df.shape
    logger.info("found {} arguments with {} columns".format(arg_cnt, arg_len))

    # generate qsub script from template
    with open(template_fp, 'r') as f:
        template = f.read()
    params = TemplateParams({
        "job_name": script_fp.stem,
        "script": "./" + script_fp.name,
        "arguments": ' '.join(["${}".format(i) for i in range(1, arg_len + 1)]),
        "script_fp": script_fp,
        "arg_fp": arg_fp,
        "datetime": datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    })
    qsub_script = template.format_map(params)
    logger.info("generated qsub script from {}".format(template_fp))

    # output qsub script
    with open(qsub_fp, 'w') as f:
        f.write(qsub_script)
    qsub_fp.chmod(0o744)
    logger.info("saved qsub script to {}".format(qsub_fp))

    logger.info("execute the following array job command:")
    cmd = "qsub -t 1-{} -tc 16 {} {}".format(arg_cnt, qsub_fp, arg_fp)
    print(cmd)


if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG, datefmt="%m/%d/%Y %I:%M:%S",
                        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")

    script_fp = pathlib.Path(sys.argv[1])
    arg_fp = pathlib.Path(sys.argv[2])
    assert script_fp.suffix == ".sh"
    assert arg_fp.suffix == ".arg"
    template_fp = pathlib.Path(__file__).parent.joinpath("qsubgen.template")
    qsub_fp = script_fp.with_suffix(".qsub")

    main(script_fp, arg_fp, template_fp, qsub_fp)
